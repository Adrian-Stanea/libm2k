variables:
  libiioPipelineId: 9
  PYTHON: python
  PIP: pip
  AnalogDevices_OpenSource_GUID: '02a28b00-b3c8-4fdf-af9c-c2460499147f'
  IS_PULL_REQUEST: ${{ eq('$(Build.Reason)', 'PullRequest') }}
  BRANCH_NAME: $(Build.SourceBranchName)
  REPO_SLUG: $(Build.Repository.Name)
  CURRENT_COMMIT: $(Build.SourceVersion)

trigger:
- main
- master
- staging/*
- 20*
- v*.*.*
- ci-*

pr:
- main
- master
- 20*

parameters:
  - name: pythonVersions
    type: object
    default:
    - '3.10'
    - 3.9
    - 3.8
    - 3.7

jobs:
- job: LinuxBuilds
  strategy:
    matrix:
      ubuntu_18_04:
        imageName: 'ubuntu-18.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: bionic
        artifactName: 'Linux-Ubuntu-18.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu_20_04:
        imageName: 'ubuntu-20.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      ubuntu_22_04:
        imageName: 'ubuntu-22.04'
        OS_TYPE: 'ubuntu_docker'
        OS_VERSION: jammy
        artifactName: 'Linux-Ubuntu-22.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
      deploy_doxygen:
        imageName: 'ubuntu-20.04'
        OS_TYPE: 'doxygen'
        OS_VERSION: focal
        artifactName: 'Linux-Ubuntu-20.04'
        PACKAGE_TO_INSTALL: 'build/*.deb'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true
  - task: DownloadPipelineArtifact@2
    displayName: 'Get libiio artifacts'
    inputs:
      source: 'specific'
      project: '$(AnalogDevices_OpenSource_GUID)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/fixMinGW'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_linux
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_linux
    displayName: "Build"
  - task: CopyFiles@2
    condition: ne(variables['System.JobName'], 'deploy_doxygen')
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['System.JobName'], 'deploy_doxygen'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'

- job: macOSBuilds
  strategy:
    matrix:
      macOS_11:
        imageName: 'macOS-11'
        artifactName: 'macOS-11'
      macOS_12:
        imageName: 'macOS-12'
        artifactName: 'macOS-12'
  pool:
    vmImage: $(imageName)
  variables:
    PACKAGE_TO_INSTALL: 'build/*.pkg'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: DownloadPipelineArtifact@2
    displayName: 'Get libiio artifacts'
    inputs:
      source: 'specific'
      project: '$(AnalogDevices_OpenSource_GUID)'
      pipeline: $(libiioPipelineId)
      artifact: '$(artifactName)'
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/fixMinGW'
      path: '$(Agent.BuildDirectory)/s/build/'
  - script: ./CI/travis/before_install_darwin
    displayName: "Install Dependencies"
  - script: ./CI/travis/make_darwin
    displayName: "Build"
  - ${{ each pyVersion in parameters.pythonVersions }}:
    - task: UsePythonVersion@0
      displayName: Use Python ${{ pyVersion }}
      inputs:
        versionSpec: '${{ pyVersion }}'
    - script: |
            python3 --version
            python3 -m pip install wheel twine build virtualenv
            cd '$(Agent.BuildDirectory)/s/build/'
            mkdir -p wheelhouse
            export COMPILE_BINDINGS=True
            python3 -m build
            export COMPILE_BINDINGS=
            cp dist/*.whl wheelhouse
      displayName: Wheel Python ${{ pyVersion }}
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build/'
      contents: '$(Agent.BuildDirectory)/s/build/wheelhouse/?(*.whl)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
      contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.tar.gz)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: '$(artifactName)'
  - script: |
      python -m pip install --upgrade pip twine
      cd '$(Agent.BuildDirectory)/s/build/wheelhouse/'
      python -m twine upload --repository "testpypi" *.whl
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    displayName: "Upload to PyPI"
    env:
      TWINE_USERNAME: '__token__'
      TWINE_PASSWORD: $(TWINE_PASSWORD)

- job: WindowsBuilds
  strategy:
    matrix:
      VS2019_Win64:
        imageName: 'windows-2019'
        COMPILER: 'Visual Studio 16 2019'
        ARCH: 'x64'
        artifactName: 'Windows-VS-2019-x64'
      VS2022_Win64:
        imageName: 'windows-2022'
        COMPILER: 'Visual Studio 17 2022'
        ARCH: 'x64'
        artifactName: 'Windows-VS-2019-x64'
  pool:
    vmImage: $[ variables['imageName'] ]
  steps:
    - checkout: self
      fetchDepth: 1
      clean: true
    - task: DownloadPipelineArtifact@2
      displayName: 'Get libiio artifacts'
      env:
        MSYSTEM: MINGW64
        CHERE_INVOKING: yes
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(TWINE_PASSWORD)
      inputs:
        source: 'specific'
        project: '$(AnalogDevices_OpenSource_GUID)'
        pipeline: $(libiioPipelineId)
        artifact: '$(artifactName)'
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/fixMinGW'
        path: '$(Agent.BuildDirectory)/s/build/'
    - task: PowerShell@2
      displayName: 'Dependencies'
      env:
        MSYSTEM: MINGW64
        CHERE_INVOKING: yes
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(TWINE_PASSWORD)
      inputs:
        targetType: inline
        script: |
          # Build and install libiio
          - bash -c "/c/projects/libm2k/CI/appveyor/install_deps_msvc.sh"
      
          # Download SWIG
          - cd c:\
          - wget https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.0.0/swigwin-4.0.0.zip
          - 7z x swigwin-4.0.0.zip -oswig
          - cd swig/swigwin-4.0.0
          - xcopy * .. /s /e /h /Q
      
          #Install Inno Setup
          - choco install InnoSetup
          - set PATH=%PATH%;"C:\Program Files (x86)\Inno Setup 5"
    - task: PowerShell@2
      displayName: 'Build script'
      env:
        MSYSTEM: MINGW64
        CHERE_INVOKING: yes
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(TWINE_PASSWORD)
      inputs:
        targetType: inline
        script: |
          # Download glog
          - cd c:\
          - C:\projects\libm2k\CI\appveyor\install_glog.bat "Release" "x64"
          - C:\projects\libm2k\CI\appveyor\install_glog.bat "Release" "Win32"
      
          - bash -c "/c/projects/libm2k/CI/appveyor/build_appveyor_msvc.sh"
          #Create the installer
          - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\14.29.30133\x86\Microsoft.VC142.CRT\msvcp140.dll" c:\projects\libm2k\build-win32
          - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\14.29.30133\x64\Microsoft.VC142.CRT\msvcp140.dll" c:\projects\libm2k\build-win64
          - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\14.29.30133\x86\Microsoft.VC142.CRT\vcruntime140.dll" c:\projects\libm2k\build-win32
          - copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\14.29.30133\x64\Microsoft.VC142.CRT\vcruntime140.dll" c:\projects\libm2k\build-win64
          - ISCC c:\projects\libm2k\build-win64\libm2k.iss
          # - appveyor PushArtifact C:\libm2k-system-setup.exe
      
          # Create ZIPs
          - cd c:\projects\libm2k
          
          - mkdir c:\wheelhouse
          - mkdir c:\libm2k-win32
          - mkdir c:\libm2k-win32\dist
          - xcopy include c:\libm2k-win32 /s /e /h
          - copy build-win32\libm2k.* c:\libm2k-win32\
          - copy build-win32\_libm2k.* c:\libm2k-win32\
          - copy build-win32\libm2k_lv.dll c:\libm2k-win32\
          - copy build-win32\libm2k-sharp.dll c:\libm2k-win32\
          - copy build-win32\libm2k-sharp-cxx-wrap.dll c:\libm2k-win32\
          - copy build-win32\*.exe c:\libm2k-win32\
          - copy build-win32\msvc*.dll c:\libm2k-win32\
          - copy build-win32\vcruntime*.dll c:\libm2k-win32\
          - copy build-win32\dist\*.whl c:\libm2k-win32\dist\
          - copy build-win32\dist\*.whl c:\wheelhouse
          - copy c:\libiio-win32\*.dll c:\libm2k-win32\
          - copy c:\glog\build_0_4_0-Win32\Release\glog.dll c:\libm2k-win32\
          - 7z a "c:\libm2k-win32.zip" c:\libm2k-win32
          # - ps: Get-ChildItem c:\libm2k-win32\dist\*.whl | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
          # - appveyor PushArtifact c:\libm2k-win32.zip
      
          - mkdir c:\libm2k-win64
          - mkdir c:\libm2k-win64\dist
          - xcopy include c:\libm2k-win64 /s /e /h
          - copy build-win64\libm2k.* c:\libm2k-win64\
          - copy build-win64\_libm2k.* c:\libm2k-win64\
          - copy build-win64\libm2k_lv.dll c:\libm2k-win64\
          - copy build-win64\libm2k-sharp.dll c:\libm2k-win64\
          - copy build-win64\libm2k-sharp-cxx-wrap.dll c:\libm2k-win64\
          - copy build-win64\*.exe c:\libm2k-win64\
          - copy build-win64\msvc*.dll c:\libm2k-win64\
          - copy build-win64\vcruntime*.dll c:\libm2k-win64\
          - copy build-win64\dist\*.whl c:\libm2k-win64\dist\
          - copy build-win64\dist\*.whl c:\wheelhouse
          - copy c:\libiio-win64\*.dll c:\libm2k-win64\
          - copy c:\glog\build_0_4_0-x64\Release\glog.dll c:\libm2k-win64\
          - 7z a "c:\libm2k-win64.zip" c:\libm2k-win64
          # - ps: Get-ChildItem c:\libm2k-win64\dist\*.whl | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
          # - appveyor PushArtifact c:\libm2k-win64.zip
