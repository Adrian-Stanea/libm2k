/*
 * Copyright (c) 2019 Analog Devices Inc.
 *
 * This file is part of libm2k
 * (see http://www.github.com/analogdevicesinc/libm2k).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "fake/m2kanalogin_fake_impl.hpp"
#include <libm2k/m2kexceptions.hpp>
#include <algorithm>
#include "utils/channel.hpp"

using namespace libm2k;
using namespace libm2k::analog;
using namespace libm2k::utils;
using namespace std::placeholders;

#define HIGH_MAX 2.5
#define HIGH_MIN -2.5
#define LOW_MAX 25
#define LOW_MIN -25

M2kFakeAnalogInImpl::M2kFakeAnalogInImpl(iio_context * ctx, std::string adc_dev, bool sync, M2kHardwareTrigger *trigger) :
	M2kAnalogIn(),
	m_need_processing(false),
	m_max_samplerate(-1),
	m_trigger(trigger)
{
	m_m2k_adc = make_shared<DeviceIn>(ctx, adc_dev);
	m_m2k_fabric = make_shared<DeviceGeneric>(ctx, "m2k-fabric");
	m_ad5625_dev = make_shared<DeviceGeneric>(ctx, "ad5625");

	/* Filters applied while decimating affect the
		/ amplitude of the received  data */
	m_filter_compensation_table[1E8] = 1.00;
	m_filter_compensation_table[1E7] = 1.05;
	m_filter_compensation_table[1E6] = 1.10;
	m_filter_compensation_table[1E5] = 1.15;
	m_filter_compensation_table[1E4] = 1.20;
	m_filter_compensation_table[1E3] = 1.26;

	// calibbias attribute is only available in firmware versions newer than 0.26
	m_calibbias_available = m_m2k_adc->getChannel(ANALOG_IN_CHANNEL_1, false)->hasAttribute("calibbias");
	m_samplerate = 1E8;

	for (unsigned int i = 0; i < getNbChannels(); i++) {
		m_input_range.push_back(PLUS_MINUS_25V);
		m_adc_calib_offset.push_back(2048);
		m_adc_calib_gain.push_back(1);
		m_adc_hw_vert_offset.push_back(0);
                m_adc_hw_offset_raw.push_back(2048);
		m_trigger->setCalibParameters(i, getScalingFactor(i), m_adc_hw_vert_offset.at(i));
	}

	if (sync) {
		syncDevice();
	}
}



M2kFakeAnalogInImpl::~M2kFakeAnalogInImpl() = default;

void M2kFakeAnalogInImpl::enableChannel(unsigned int chn_idx, bool enable)
{	
}

bool M2kFakeAnalogInImpl::isChannelEnabled(unsigned int chn_idx)
{
	return true;
}

unsigned int M2kFakeAnalogInImpl::getNbChannels()
{
	return m_m2k_adc->getNbChannels(false);
}

void M2kFakeAnalogInImpl::reset()
{
}

void M2kFakeAnalogInImpl::syncDevice()
{
}

void M2kFakeAnalogInImpl::setAdcCalibGain(ANALOG_IN_CHANNEL channel, double gain)
{	
}

void M2kFakeAnalogInImpl::setAdcCalibOffset(ANALOG_IN_CHANNEL channel, int raw_offset)
{
}

double M2kFakeAnalogInImpl::convRawToVolts(int sample, double correctionGain,
				       double hw_gain, double filterCompensation, double offset) const
{
	// TO DO: explain this formula
	return ((sample * 0.78) / ((1u << 11u) * 1.3 * hw_gain) *
		correctionGain * filterCompensation) + offset;
}

double M2kFakeAnalogInImpl::convertRawToVolts(unsigned int channel, short sample)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return convRawToVolts(sample,
			      m_adc_calib_gain.at(channel),
			      getValueForRange(m_input_range.at(channel)),
			      getFilterCompensation(m_samplerate),
			      -m_adc_hw_vert_offset.at(channel));
}

short M2kFakeAnalogInImpl::convVoltsToRaw(double voltage, double correctionGain,
				      double hw_gain, double filterCompensation, double offset)
{
	// TO DO: explain this formula
	return (short)(((voltage - offset) / (correctionGain * filterCompensation) *
			(2048 * 1.3 * hw_gain) / 0.78));
}

short M2kFakeAnalogInImpl::convertVoltsToRaw(unsigned int channel, double voltage)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return convVoltsToRaw(voltage,
			      m_adc_calib_gain.at(channel),
			      getValueForRange(m_input_range.at(channel)),
			      getFilterCompensation(m_samplerate),
			      -m_adc_hw_vert_offset.at(channel));
}

double M2kFakeAnalogInImpl::getCalibscale(unsigned int index)
{
	if (index >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return 0;
}

double M2kFakeAnalogInImpl::setCalibscale(unsigned int index, double calibscale)
{
	return 0;
}

libm2k::M2kHardwareTrigger *M2kFakeAnalogInImpl::getTrigger()
{
	return m_trigger;
}


void M2kFakeAnalogInImpl::startAcquisition(unsigned int nb_samples)
{
}

void M2kFakeAnalogInImpl::stopAcquisition()
{
}

/**
	 * @brief Utility method to be used before and after ADC getSamples calls.
	 * For the m2k-adc, all the channels have to be enabled before refilling
	 */

std::vector<std::vector<double>> M2kFakeAnalogInImpl::getSamples(unsigned int nb_samples)
{
	return this->getSamples(nb_samples, true);
}

std::vector<std::vector<double>> M2kFakeAnalogInImpl::getSamplesRaw(unsigned int nb_samples)
{
	return this->getSamples(nb_samples, false);
}

std::vector<std::vector<double>> M2kFakeAnalogInImpl::getSamples(unsigned int nb_samples, bool processed)
{
	/*f (processed) {
		m_need_processing = true;
	}
	m_samplerate = getSampleRate();
	handleChannelsEnableState(true);

	auto fp = std::bind(&M2kAnalogInImpl::processSample, this, std::placeholders::_1, std::placeholders::_2);
	auto samps = m_m2k_adc->getSamples(nb_samples, fp);

	removeSamplesDisabledChannels(samps);
	handleChannelsEnableState(false);
	if (processed) {
		m_need_processing = false;
	}*/
	std::vector<std::vector<double>> samps;
	std::vector<double> ch0;
	std::vector<double> ch1;
	samps.push_back(ch0);
	samps.push_back(ch1);

	return samps;
}

void M2kFakeAnalogInImpl::getSamples(std::vector<std::vector<double> > &data, unsigned int nb_samples)
{
	/*m_need_processing = true;
	m_samplerate = getSampleRate();
	handleChannelsEnableState(true);

	auto fp = std::bind(&M2kFakeAnalogInImpl::processSample, this, _1, _2);
	m_m2k_adc->getSamples(data, nb_samples, fp);

	removeSamplesDisabledChannels(data);
	handleChannelsEnableState(false);
	m_need_processing = false;*/

}

string M2kFakeAnalogInImpl::getChannelName(unsigned int channel)
{	
	return "CH0";
}

double M2kFakeAnalogInImpl::getMaximumSamplerate()
{
	if (m_max_samplerate < 0) {
		auto values = getAvailableSampleRates();
		m_max_samplerate = *(max_element(values.begin(), values.end()));
	}
	return m_max_samplerate;
}

void M2kFakeAnalogInImpl::deinitialize()
{
}

bool M2kFakeAnalogInImpl::hasCalibbias()
{
	return m_calibbias_available;
}

const double* M2kFakeAnalogInImpl::getSamplesInterleaved(unsigned int nb_samples)
{
	return this->getSamplesInterleaved(nb_samples, true);
}

const double *M2kFakeAnalogInImpl::getSamplesInterleaved(unsigned int nb_samples, bool processed)
{
	/*if (processed) {
		m_need_processing = true;
	}
	m_samplerate = getSampleRate();
	handleChannelsEnableState(true);

	auto fp = std::bind(&M2kFakeAnalogInImpl::processSample, this, std::placeholders::_1, std::placeholders::_2);
	auto samps = (const double *)m_m2k_adc->getSamplesInterleaved(nb_samples, fp);

	handleChannelsEnableState(false);
	if (processed) {
		m_need_processing = false;
	}*/
	return 0;
}

void M2kFakeAnalogInImpl::handleChannelsEnableState(bool)
{

}

const short *M2kFakeAnalogInImpl::getSamplesRawInterleaved(unsigned int nb_samples)
{
	m_samplerate = getSampleRate();
	handleChannelsEnableState(true);
	auto samps = m_m2k_adc->getSamplesRawInterleaved(nb_samples);
	handleChannelsEnableState(false);
	return samps;
}

double M2kFakeAnalogInImpl::processSample(int16_t sample, unsigned int channel)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	if (m_need_processing) {
		return convRawToVolts(sample,
				      m_adc_calib_gain.at(channel),
				      getValueForRange(m_input_range.at(channel)),
				      getFilterCompensation(m_samplerate),
				      -m_adc_hw_vert_offset.at(channel));
	} else {
		return (double)sample;
	}
}

short M2kFakeAnalogInImpl::getVoltageRaw(unsigned int ch)
{
	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	auto chn = static_cast<ANALOG_IN_CHANNEL>(ch);
	return getVoltageRaw(chn);
}

short M2kFakeAnalogInImpl::getVoltageRaw(ANALOG_IN_CHANNEL ch)
{
	unsigned int num_samples = 100;
	M2K_TRIGGER_MODE mode;
	bool enabled;

	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
		return -1;
	}

	return (short)1024;
}

std::vector<short> M2kFakeAnalogInImpl::getVoltageRaw()
{
	unsigned int num_samples = 100;
	std::vector<short> avgs;
	avgs.push_back(1024);
	avgs.push_back(1024);

	return avgs;
}

const short *M2kFakeAnalogInImpl::getVoltageRawP()
{
	std::vector<short> avgs = getVoltageRaw();
	return avgs.data();
}

double M2kFakeAnalogInImpl::getVoltage(unsigned int ch)
{
	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	auto chn = static_cast<ANALOG_IN_CHANNEL>(ch);
	return getVoltage(chn);
}

double M2kFakeAnalogInImpl::getVoltage(ANALOG_IN_CHANNEL ch)
{
	unsigned int num_samples = 100;
	M2K_TRIGGER_MODE mode;
	bool enabled;

	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
		return -1;
	}

	auto avg=2.2;
	return avg;
}

std::vector<double> M2kFakeAnalogInImpl::getVoltage()
{
	size_t num_samples = 100;
	std::vector<double> avgs;
	std::vector<M2K_TRIGGER_MODE> modes = {};
	std::vector<bool> enabled = {};

	avgs.push_back(2.2);
	avgs.push_back(2.2);
	return avgs;
}

const double *M2kFakeAnalogInImpl::getVoltageP()
{
	std::vector<double> avgs = getVoltage();
	return avgs.data();
}

double M2kFakeAnalogInImpl::getScalingFactor(ANALOG_IN_CHANNEL ch)
{
	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return (0.78 / ((1u << 11u) * 1.3 *
			getValueForRange(m_input_range.at(ch))) *
		m_adc_calib_gain.at(ch) *
		getFilterCompensation(getSampleRate()));
}

double M2kFakeAnalogInImpl::getScalingFactor(unsigned int ch)
{
	if (ch >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	auto channel = static_cast<ANALOG_IN_CHANNEL>(ch);
	return getScalingFactor(channel);
}

std::pair<double, double> M2kFakeAnalogInImpl::getHysteresisRange(ANALOG_IN_CHANNEL chn)
{
	if (chn >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	std::pair<double, double> m2k_range = getRangeLimits(getRange(chn));
	return (std::pair<double, double>(0, m2k_range.second / 10));
}

void M2kFakeAnalogInImpl::setRange(ANALOG_IN_CHANNEL channel, M2K_RANGE range)
{
	return;
}

void M2kFakeAnalogInImpl::setRange(ANALOG_IN_CHANNEL channel, double min, double max)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	if ((min >= HIGH_MIN) && (max <= HIGH_MAX)) {
		setRange(channel, PLUS_MINUS_2_5V);
	} else {
		setRange(channel, PLUS_MINUS_25V);
	}
}

M2K_RANGE M2kFakeAnalogInImpl::getRange(ANALOG_IN_CHANNEL channel)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return m_input_range[channel];
}

M2K_RANGE M2kFakeAnalogInImpl::getRangeDevice(ANALOG_IN_CHANNEL channel)
{
	return PLUS_MINUS_2_5V;
}

std::pair<double, double> M2kFakeAnalogInImpl::getRangeLimits(M2K_RANGE range)
{
	auto limits = std::pair<double, double>(HIGH_MIN, HIGH_MAX);
	if (range == PLUS_MINUS_25V) {
		limits.first = LOW_MIN;
		limits.second = LOW_MAX;
	}
	return limits;
}

std::vector<std::pair<std::string, std::pair<double, double>>> M2kFakeAnalogInImpl::getAvailableRanges()
{
	std::vector<std::pair<std::string, std::pair <double, double>>> ranges;
	std::pair<std::string, std::pair <double, double>> p;
	p.first = "PLUS_MINUS_25V";
	p.second = getRangeLimits(PLUS_MINUS_25V);
	ranges.push_back(p);

	p.first = "PLUS_MINUS_2_5V";
	p.second = getRangeLimits(PLUS_MINUS_2_5V);
	ranges.push_back(p);

	return ranges;
}


void M2kFakeAnalogInImpl::setVerticalOffset(ANALOG_IN_CHANNEL channel, double vertOffset)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	int raw_vert_offset = convertVoltsToRawVerticalOffset(channel, vertOffset);
	m_adc_hw_vert_offset.at(channel) = vertOffset;
	const int hw_offset_raw = raw_vert_offset + m_adc_calib_offset.at(channel);
	m_adc_hw_offset_raw.at(channel) = hw_offset_raw;
	m_trigger->setCalibParameters(channel, getScalingFactor(channel), m_adc_hw_vert_offset.at(channel));
}

double M2kFakeAnalogInImpl::getVerticalOffset(ANALOG_IN_CHANNEL channel)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return m_adc_hw_vert_offset.at(channel);
}

int M2kFakeAnalogInImpl::getOversamplingRatio()
{
	return 1;
}

int M2kFakeAnalogInImpl::getOversamplingRatio(unsigned int chn_idx)
{
	return 1;
}

int M2kFakeAnalogInImpl::setOversamplingRatio(int oversampling_ratio)
{
	return 1;
}

int M2kFakeAnalogInImpl::setOversamplingRatio(unsigned int chn_idx, int oversampling_ratio)
{
	if (chn_idx >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return 1;
}


double M2kFakeAnalogInImpl::getSampleRate()
{
	return 100000000;
}

double M2kFakeAnalogInImpl::getSampleRate(unsigned int chn_idx)
{
	if (chn_idx >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return 100000000;
}

double M2kFakeAnalogInImpl::setSampleRate(double samplerate)
{
	return 100000000;
}

double M2kFakeAnalogInImpl::setSampleRate(unsigned int chn_idx, double samplerate)
{
	if (chn_idx >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}

	return 100000000;
}

double M2kFakeAnalogInImpl::getFilterCompensation(double samplerate)
{
	double compensation = 0.0;
	if(m_filter_compensation_table.find(samplerate) != m_filter_compensation_table.end()) {
		compensation = m_filter_compensation_table.at(samplerate);
	} else {
		THROW_M2K_EXCEPTION("Cannot get compensation value for the given samplerate.", libm2k::EXC_INVALID_PARAMETER);
	}
	return compensation;
}

double M2kFakeAnalogInImpl::getValueForRange(M2K_RANGE range)
{
	if (range == PLUS_MINUS_25V) {
		return 0.02017;
	} else if (range == PLUS_MINUS_2_5V) {
		return 0.21229;
	} else {
		return 0;
	}
}

struct libm2k::IIO_OBJECTS M2kFakeAnalogInImpl::getIioObjects()
{
	return m_m2k_adc->getIioObjects();
}

void M2kFakeAnalogInImpl::cancelAcquisition()
{	
}

void M2kFakeAnalogInImpl::setKernelBuffersCount(unsigned int count)
{
}

std::vector<double> M2kFakeAnalogInImpl::getAvailableSampleRates()
{
	std::vector<std::string> stringValues;
	std::vector<double> values;
	values.push_back(100000000);

	return values;
}

std::string M2kFakeAnalogInImpl::getName()
{
	return "m2k-adc";
}

void M2kFakeAnalogInImpl::convertChannelHostFormat(unsigned int chn_idx, int16_t *avg, int16_t *src)
{
	if (chn_idx >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	m_m2k_adc->convertChannelHostFormat(chn_idx, avg, src, false);
}

void M2kFakeAnalogInImpl::convertChannelHostFormat(unsigned int chn_idx, double *avg, int16_t *src)
{
	if (chn_idx >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	m_m2k_adc->convertChannelHostFormat(chn_idx, avg, src, false);
}

const int M2kFakeAnalogInImpl::convertVoltsToRawVerticalOffset(ANALOG_IN_CHANNEL channel, double vertOffset)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	double gain = 1.3;
	double vref = 1.2;
	double hw_range_gain = getValueForRange(m_input_range.at(channel));
        return static_cast<int>(vertOffset * (1u << 12u) * hw_range_gain * gain / 2.693 / vref);
}

const double M2kFakeAnalogInImpl::convertRawToVoltsVerticalOffset(ANALOG_IN_CHANNEL channel, int rawVertOffset)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	double gain = 1.3;
	double vref = 1.2;
	double hw_range_gain = getValueForRange(m_input_range.at(channel));
        return rawVertOffset * 2.693 * vref / ((1u << 12u) * hw_range_gain * gain);
}

int M2kFakeAnalogInImpl::getRawVerticalOffset(ANALOG_IN_CHANNEL channel)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	return m_adc_hw_offset_raw.at(channel) - m_adc_calib_offset.at(channel);
}

void M2kFakeAnalogInImpl::setRawVerticalOffset(ANALOG_IN_CHANNEL channel, int rawVertOffset)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	double vertOffset = convertRawToVoltsVerticalOffset(channel, rawVertOffset);
	m_adc_hw_vert_offset.at(channel) = vertOffset;
	const int hw_offset_raw = rawVertOffset + m_adc_calib_offset.at(channel);
	//m_adc_hw_offset_raw.at(channel) = m_ad5625_dev->setLongValue(channel + 2, hw_offset_raw, "raw", true);
	m_trigger->setCalibParameters(channel, getScalingFactor(channel), m_adc_hw_vert_offset.at(channel));
}

void M2kFakeAnalogInImpl::setAdcCalibOffset(ANALOG_IN_CHANNEL channel, int calib_offset, int vert_offset)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	double vertOffset = convertRawToVoltsVerticalOffset(channel, vert_offset);
	m_adc_hw_vert_offset.at(channel) = vertOffset;

	if (m_calibbias_available) {
		//m_adc_calib_offset.at(channel) = m_m2k_adc->setLongValue(channel, calib_offset, "calibbias", false);
        } else {
                m_adc_calib_offset.at(channel) = calib_offset;
	}

	const int hw_offset_raw = vert_offset + m_adc_calib_offset.at(channel);
//	m_adc_hw_offset_raw.at(channel) = m_ad5625_dev->setLongValue(channel + 2, hw_offset_raw, "raw", true);

	m_trigger->setCalibParameters(channel, getScalingFactor(channel), m_adc_hw_vert_offset.at(channel));
}

int M2kFakeAnalogInImpl::getAdcCalibOffset(ANALOG_IN_CHANNEL channel)
{
	if (channel >= getNbChannels()) {
		THROW_M2K_EXCEPTION("M2kAnalogIn: no such channel", libm2k::EXC_OUT_OF_RANGE);
	}
	if (m_calibbias_available) {
		return 0;//m_m2k_adc->getLongValue(channel, "calibbias", false);
	} else {
		auto adc_hw_offset = 2048;//m_ad5625_dev->getLongValue(channel + 2, "raw", true);
		return (adc_hw_offset - m_adc_hw_vert_offset.at(channel));
	}
}
